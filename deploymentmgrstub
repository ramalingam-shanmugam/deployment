#!/usr/bin/python
###################################################################
# File Name   : qmServerDeploymentManager.py
# Dependencies  : none
# Description   : To deploy the latest queue manager and session manager war files in deployment servers
# Contact       : rasmi.nayak.up9m@statefarm.com
###################################################################

## modules
from QMHelper import parse_deployment_plan_config
from QMHelper import deploy_app_remote_server
from QMHelper import undeploy_app_remote_server
from QMHelper import restart_tomcat_service
from QMHelper import control_tomcat_service
from QMHelper import control_apache_service
from QMHelper import parse_environment_config
from QMHelper import update_status_config
from QMHelper import validate_inputs_params
from QMHelper import logging_setup
from QMHelper import test_sshkey_remote_server
from QMHelper import get_sessionManager_config

import time,pprint,json
import logging
import getopt
import sys
import __main__
import datetime
import re

## Global vars
QM_DEPLOYMENT_PLAN="qmDeploymentServers.json";
servers=[];
validSSHEnabledServers=[];
returnJson={};
feature="";
warFileName="";
appName="";
action="";
smurl="";
environmentData="";

methods={
    "testSSHKey" : "validateServerSSHKey",
    "restartTomcatServer" : "restartTomcatServer",
    "deployQMApp" : "deployQMApp",
    "undeployQMApp" : "undeployQMApp",
    "controlTomcat" : "controlTomcat",
    "controlApache" : "controlApache",
    "getSessionManagerConfig" : "getSessionManagerConfig",
	"updateEnvironmentFile" : "updateEnvironmentFile"
};

try:
    opts, args = getopt.getopt(sys.argv[1:], 'f:s:w:a:c:u:d:', ['feature=','server=','warfile=',"app=","control=","url=","data="])
    for opt, arg in opts:
        if opt in ('-s', '--server'):
            servers=re.sub(r'\s', '', arg).split(',');
        elif opt in ('-f', '--feature'):
            feature = arg;
        elif opt in ('-w', '--warfile'):
            warFileName = arg;
        elif opt in ('-a', '--app'):
            appName = arg;
        elif opt in ('-c', '--control'):
            action = arg;
        elif opt in ('-u', '--url'):
            smurl = arg;
		elif opt in ('-d', '--data'):
            environmentData = arg;			
        else:
            print '{"error","Invalid arguments"}';
            exit(1);

except getopt.GetoptError:
    print '{"error","Invalid arguments"}'


if( not methods.has_key(feature)):
    print '{"error","Invalid arguments"}';
    exit(1);

if     feature == "deployQMApp" or feature == "undeployQMApp":
    if appName == "" or warFileName == "":
        print '{"error","Invalid arguments"}';
        exit(1);

if     feature == "controlTomcat" or feature == "controlApache":
    if action == "" :
        print '{"error","Invalid arguments"}';
        exit(1);

if     feature == "updateEnvironmentFile":
    if environmentData == "" :
        print '{"error","Invalid arguments"}';
        exit(1);
 
def validateServerNamesDeploymentConfig():
    validServers=[];
    json_data=parse_deployment_plan_config(QM_DEPLOYMENT_PLAN);
    for jsonObj in json_data["servers"]:
        validServers.append(str(jsonObj["name"]));
    return validServers;

def validateAppNamesDeploymentConfig():
    validAppName=[];
    json_data=parse_deployment_plan_config(QM_DEPLOYMENT_PLAN);
    for jsonObj in json_data["servers"]:
        validAppName.append(jsonObj["type"]);
    return validAppName;
    
def validateServerSSHKey(serverName,appName=""):
    #serverName=serverName.replace("orgtest","org");  ## I dont like this only for prod server
    if serverName == "":
       return 0;

    if not serverName in validateServerNamesDeploymentConfig():
        return 0;
    
    returnStatus=test_sshkey_remote_server(serverName);
    if returnStatus ==  1:
        return 1;
    else:
        return 0;

def restartTomcatServer(serverName,appName=""):
    #print "serverName ",serverName, " appName ",appName;
    if serverName == "":
        return 0;
        
    if not serverName in validateServerNamesDeploymentConfig():
        return 0;
    return restart_tomcat_service(serverName);

def controlTomcat(serverName,action):
    #print "serverName ",serverName, " action ",action;
    if serverName == "":
        return 0;

    if action == "":
        return 0;

    if not serverName in validateServerNamesDeploymentConfig():
        return 0;
    return control_tomcat_service(serverName,action);

def controlApache(serverName,action):
    if serverName == "":
        return 0;

    if action == "":
        return 0;

    if not serverName in validateServerNamesDeploymentConfig():
        return 0;
    return control_apache_service(serverName,action);

def undeployQMApp(serverName,appName):
    if serverName == "" or appName == "":
        return 0;
        
    if not serverName in validateServerNamesDeploymentConfig():
        return 0;
        
    if not appName in validateAppNamesDeploymentConfig():
        return 0;

    return undeploy_app_remote_server(serverName,appName);

	
def deployQMApp(serverName,appName):
    returnStatus = 0;
    if serverName == "" or appName == "":
        return 0;
    if not serverName in validateServerNamesDeploymentConfig():
        return 0;
        
    if not appName in validateAppNamesDeploymentConfig():
        return 0;
            
    if deploy_app_remote_server(serverName,appName,warFileName,appName) == 1:
        rStatusTomcatRestart=control_tomcat_service(serverName,"restart");
        rStatusApacheRestart=control_apache_service(serverName,"restart");
        if rStatusTomcatRestart == 1 and rStatusApacheRestart == 1:
            update_status_config(serverName,"status",0);
            latest_version=warFileName.replace(appName+"-","");
            update_status_config(serverName,"version",latest_version);
            returnStatus=latest_version;
        else:
            update_status_config(serverName,"status",'Tomcat or apache Service Restart Failed');
            returnStatus=0;
    else:
            update_status_config(serverName,"status",'SCP Failed');
            returnStatus=0;
    return returnStatus;

def updateEnvironmentFile(serverName, environmentData):
    returnStatus = 0;
    if serverName == "" or environmentData == "":
        return 0;
    if not serverName in validateServerNamesDeploymentConfig():
        return 0;
        
    if update_environmentfile_remote_server(serverName,environmentData) == 1:
        rStatusTomcatRestart=control_tomcat_service(serverName,"restart");
        if rStatusTomcatRestart == 1:
            update_status_config(serverName,"status",0);
            returnStatus=1;
        else:
            update_status_config(serverName,"status",'Tomcat or apache Service Restart Failed');
            returnStatus=0;
    else:
            update_status_config(serverName,"status",'SCP Failed');
            returnStatus=0;
    return returnStatus;	
	
def getSessionManagerConfig():
   if smurl == "":
      return "{}" 
   print get_sessionManager_config(smurl);

if     feature == "getSessionManagerConfig":
       getSessionManagerConfig();
       exit(1);

for srv in servers:
	if feature == "updateEnvironmentFile":
		returnStatus=eval(methods[feature])(srv,environmentData);
    elif feature == "controlTomcat" or feature == "controlApache":
		returnStatus=eval(methods[feature])(srv,action);
    else:
    	returnStatus=eval(methods[feature])(srv,appName);

    returnJson[srv]=returnStatus;
        
print json.dumps(returnJson);


